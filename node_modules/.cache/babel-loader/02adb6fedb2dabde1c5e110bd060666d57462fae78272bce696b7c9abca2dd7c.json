{"ast":null,"code":"import { toast, Toast } from \"react-hot-toast\";\n\n/** validate login page username */\nexport async function usernameValidate(values) {\n  const errors = usernameVerify({}, values);\n  return errors;\n}\n\n/** validate password */\nexport async function passwordValidate(values) {\n  const errors = passwordVerify({}, values);\n  return errors;\n}\n\n/** validate reset password */\nexport async function resetPasswordValidation(values) {\n  const errors = passwordVerify({}, values);\n  if (values.password !== values.confirm_pwd) {\n    errors.exist = toast.error(\"Password not match...!\");\n  }\n  return errors;\n}\n\n/** validate register form */\nexport async function registerValidation(values) {\n  const errors = usernameVerify({}, values);\n  passwordVerify(errors, values);\n  emailVerify(errors, values);\n  return errors;\n}\n\n/** validate profile page */\nexport async function profileValidation(values) {\n  const errors = emailVerify({}, values);\n  return errors;\n}\n\n/** validate password */\nfunction passwordVerify() {\n  let errors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n  if (!values.password) {\n    errors.password = toast.error(\"Password Required...!\");\n  } else if (values.password.includes(\" \")) {\n    errors.password = toast.error(\"Wrong Password...!\");\n  } else if (values.password.length < 4) {\n    errors.password = toast.error(\"Password must be more than 4 Characters long\");\n  } else if (!specialChars.test(values.password)) {\n    errors.password = toast.error(\"Password must have a special character\");\n  }\n  return errors;\n}\n\n/** validate username */\nfunction usernameVerify() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.username) {\n    error.username = toast.error('Username Required...!');\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error('Invalid Username...!');\n  }\n  return error;\n}\n\n/** validate email */\nfunction emailVerify() {\n  let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let values = arguments.length > 1 ? arguments[1] : undefined;\n  if (!values.email) {\n    error.email = toast.error(\"Email Required...!\");\n  } else if (values.email.includes(\"\")) {\n    error.email = toast.error(\"Wrong Email...!\");\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    error.email = toast.error(\"Invalid email address...!\");\n  }\n  return error;\n}","map":{"version":3,"names":["toast","Toast","usernameValidate","values","errors","usernameVerify","passwordValidate","passwordVerify","resetPasswordValidation","password","confirm_pwd","exist","error","registerValidation","emailVerify","profileValidation","specialChars","includes","length","test","username","email"],"sources":["C:/Users/Mishra/Documents/vs code/react/Login app/client/src/helper/validate.js"],"sourcesContent":["import { toast, Toast } from \"react-hot-toast\"\r\n\r\n/** validate login page username */\r\nexport async function usernameValidate(values){\r\n    const errors = usernameVerify({}, values);\r\n\r\n    return errors;\r\n}\r\n\r\n/** validate password */\r\nexport async function passwordValidate(values){\r\n    const errors = passwordVerify({}, values);\r\n\r\n    return errors;\r\n}\r\n\r\n/** validate reset password */\r\nexport async function resetPasswordValidation(values){\r\n    const errors = passwordVerify({}, values);\r\n\r\n    if(values.password !== values.confirm_pwd){\r\n        errors.exist = toast.error(\"Password not match...!\");\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\n/** validate register form */\r\nexport async function registerValidation(values){\r\n    const errors = usernameVerify({}, values);\r\n    passwordVerify(errors, values);\r\n    emailVerify(errors, values);\r\n    \r\n    return errors;\r\n}\r\n\r\n/** validate profile page */\r\nexport async function profileValidation(values){\r\n    const errors = emailVerify({}, values);\r\n    return errors;\r\n}\r\n\r\n/** validate password */\r\nfunction passwordVerify(errors = {}, values){\r\n    \r\n    const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\r\n\r\n    if(!values.password){\r\n        errors.password = toast.error(\"Password Required...!\");\r\n    }else if(values.password.includes(\" \")){\r\n        errors.password = toast.error(\"Wrong Password...!\");\r\n    }else if(values.password.length < 4){\r\n        errors.password = toast.error(\"Password must be more than 4 Characters long\");\r\n    }else if(!specialChars.test(values.password)){\r\n        errors.password = toast.error(\"Password must have a special character\");\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\n\r\n/** validate username */\r\nfunction usernameVerify(error = {}, values){\r\n    if(!values.username){\r\n        error.username = toast.error('Username Required...!');\r\n    }else if(values.username.includes(\" \")){\r\n        error.username = toast.error('Invalid Username...!')\r\n    }\r\n\r\n    return error;\r\n}\r\n\r\n/** validate email */\r\nfunction emailVerify(error ={}, values){\r\n    if(!values.email){\r\n        error.email = toast.error(\"Email Required...!\");\r\n    }else if(values.email.includes(\"\")){\r\n        error.email = toast.error(\"Wrong Email...!\")\r\n    }else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)){\r\n        error.email = toast.error(\"Invalid email address...!\")\r\n    }\r\n\r\n    return error;\r\n}"],"mappings":"AAAA,SAASA,KAAK,EAAEC,KAAK,QAAQ,iBAAiB;;AAE9C;AACA,OAAO,eAAeC,gBAAgB,CAACC,MAAM,EAAC;EAC1C,MAAMC,MAAM,GAAGC,cAAc,CAAC,CAAC,CAAC,EAAEF,MAAM,CAAC;EAEzC,OAAOC,MAAM;AACjB;;AAEA;AACA,OAAO,eAAeE,gBAAgB,CAACH,MAAM,EAAC;EAC1C,MAAMC,MAAM,GAAGG,cAAc,CAAC,CAAC,CAAC,EAAEJ,MAAM,CAAC;EAEzC,OAAOC,MAAM;AACjB;;AAEA;AACA,OAAO,eAAeI,uBAAuB,CAACL,MAAM,EAAC;EACjD,MAAMC,MAAM,GAAGG,cAAc,CAAC,CAAC,CAAC,EAAEJ,MAAM,CAAC;EAEzC,IAAGA,MAAM,CAACM,QAAQ,KAAKN,MAAM,CAACO,WAAW,EAAC;IACtCN,MAAM,CAACO,KAAK,GAAGX,KAAK,CAACY,KAAK,CAAC,wBAAwB,CAAC;EACxD;EAEA,OAAOR,MAAM;AACjB;;AAEA;AACA,OAAO,eAAeS,kBAAkB,CAACV,MAAM,EAAC;EAC5C,MAAMC,MAAM,GAAGC,cAAc,CAAC,CAAC,CAAC,EAAEF,MAAM,CAAC;EACzCI,cAAc,CAACH,MAAM,EAAED,MAAM,CAAC;EAC9BW,WAAW,CAACV,MAAM,EAAED,MAAM,CAAC;EAE3B,OAAOC,MAAM;AACjB;;AAEA;AACA,OAAO,eAAeW,iBAAiB,CAACZ,MAAM,EAAC;EAC3C,MAAMC,MAAM,GAAGU,WAAW,CAAC,CAAC,CAAC,EAAEX,MAAM,CAAC;EACtC,OAAOC,MAAM;AACjB;;AAEA;AACA,SAASG,cAAc,GAAqB;EAAA,IAApBH,MAAM,uEAAG,CAAC,CAAC;EAAA,IAAED,MAAM;EAEvC,MAAMa,YAAY,GAAG,yCAAyC;EAE9D,IAAG,CAACb,MAAM,CAACM,QAAQ,EAAC;IAChBL,MAAM,CAACK,QAAQ,GAAGT,KAAK,CAACY,KAAK,CAAC,uBAAuB,CAAC;EAC1D,CAAC,MAAK,IAAGT,MAAM,CAACM,QAAQ,CAACQ,QAAQ,CAAC,GAAG,CAAC,EAAC;IACnCb,MAAM,CAACK,QAAQ,GAAGT,KAAK,CAACY,KAAK,CAAC,oBAAoB,CAAC;EACvD,CAAC,MAAK,IAAGT,MAAM,CAACM,QAAQ,CAACS,MAAM,GAAG,CAAC,EAAC;IAChCd,MAAM,CAACK,QAAQ,GAAGT,KAAK,CAACY,KAAK,CAAC,8CAA8C,CAAC;EACjF,CAAC,MAAK,IAAG,CAACI,YAAY,CAACG,IAAI,CAAChB,MAAM,CAACM,QAAQ,CAAC,EAAC;IACzCL,MAAM,CAACK,QAAQ,GAAGT,KAAK,CAACY,KAAK,CAAC,wCAAwC,CAAC;EAC3E;EAEA,OAAOR,MAAM;AACjB;;AAGA;AACA,SAASC,cAAc,GAAoB;EAAA,IAAnBO,KAAK,uEAAG,CAAC,CAAC;EAAA,IAAET,MAAM;EACtC,IAAG,CAACA,MAAM,CAACiB,QAAQ,EAAC;IAChBR,KAAK,CAACQ,QAAQ,GAAGpB,KAAK,CAACY,KAAK,CAAC,uBAAuB,CAAC;EACzD,CAAC,MAAK,IAAGT,MAAM,CAACiB,QAAQ,CAACH,QAAQ,CAAC,GAAG,CAAC,EAAC;IACnCL,KAAK,CAACQ,QAAQ,GAAGpB,KAAK,CAACY,KAAK,CAAC,sBAAsB,CAAC;EACxD;EAEA,OAAOA,KAAK;AAChB;;AAEA;AACA,SAASE,WAAW,GAAmB;EAAA,IAAlBF,KAAK,uEAAE,CAAC,CAAC;EAAA,IAAET,MAAM;EAClC,IAAG,CAACA,MAAM,CAACkB,KAAK,EAAC;IACbT,KAAK,CAACS,KAAK,GAAGrB,KAAK,CAACY,KAAK,CAAC,oBAAoB,CAAC;EACnD,CAAC,MAAK,IAAGT,MAAM,CAACkB,KAAK,CAACJ,QAAQ,CAAC,EAAE,CAAC,EAAC;IAC/BL,KAAK,CAACS,KAAK,GAAGrB,KAAK,CAACY,KAAK,CAAC,iBAAiB,CAAC;EAChD,CAAC,MAAK,IAAG,CAAC,2CAA2C,CAACO,IAAI,CAAChB,MAAM,CAACkB,KAAK,CAAC,EAAC;IACrET,KAAK,CAACS,KAAK,GAAGrB,KAAK,CAACY,KAAK,CAAC,2BAA2B,CAAC;EAC1D;EAEA,OAAOA,KAAK;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}